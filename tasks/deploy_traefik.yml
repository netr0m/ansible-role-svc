---
- name: Gather Traefik middleware entries
  block:
    - name: Find variables starting with '{{ __svc_traefik_middleware_var_prefix }}'
      ansible.builtin.set_fact:
        __svc_traefik_mwr_matches: "{{ lookup('ansible.builtin.varnames', '^{{ __svc_traefik_middleware_var_prefix }}(_)?.*') | split(',') }}"

    - name: Merge extra Traefik middleware entries
      ansible.builtin.set_fact:
        __svc_traefik_extra_middlewares: "{{ __svc_traefik_extra_middlewares | combine(lookup('ansible.builtin.vars', item)) }}"
      with_items: "{{ __svc_traefik_mwr_matches }}"

- name: Manage traefik config
  block:
    - name: Ensure traefik config directory is present
      ansible.builtin.file:
        path: "{{ svc_traefik_directories.cfg.path }}"
        state: directory
        owner: "{{ svc_traefik_directories.cfg.owner | default(svc_subdirectories.cfg.owner) | default(svc_directory.owner) }}"
        group: "{{ svc_traefik_directories.cfg.group | default(svc_subdirectories.cfg.group) | default(svc_directory.group) }}"
        mode: "{{ svc_traefik_directories.cfg.mode | default(svc_subdirectories.cfg.mode) | default(svc_directory.mode) }}"

    - name: Ensure traefik configs subdirectory is present
      ansible.builtin.file:
        path: "{{ svc_traefik_directories.cfg.path }}/config"
        state: directory
        owner: "{{ svc_traefik_directories.cfg.owner | default(svc_subdirectories.cfg.owner) | default(svc_directory.owner) }}"
        group: "{{ svc_traefik_directories.cfg.group | default(svc_subdirectories.cfg.group) | default(svc_directory.group) }}"
        mode: "{{ svc_traefik_directories.cfg.mode | default(svc_subdirectories.cfg.mode) | default(svc_directory.mode) }}"

    - name: Copy traefik config into place
      ansible.builtin.template:
        src: etc/traefik/traefik.yml.j2
        dest: "{{ svc_traefik_directories.cfg.path }}/traefik.yml"
        owner: "{{ svc_traefik_directories.cfg.owner | default(svc_subdirectories.cfg.owner) | default(svc_directory.owner) }}"
        group: "{{ svc_traefik_directories.cfg.group | default(svc_subdirectories.cfg.group) | default(svc_directory.group) }}"
        mode: "{{ svc_traefik_directories.cfg.mode | default(svc_subdirectories.cfg.mode) | default(svc_directory.mode) }}"
        backup: true
      register: copy_traefik_config_result

    - name: Copy traefik http config into place
      ansible.builtin.template:
        src: etc/traefik/config/http.yml.j2
        dest: "{{ svc_traefik_directories.cfg.path }}/config/http.yml"
        owner: "{{ svc_traefik_directories.cfg.owner | default(svc_subdirectories.cfg.owner) | default(svc_directory.owner) }}"
        group: "{{ svc_traefik_directories.cfg.group | default(svc_subdirectories.cfg.group) | default(svc_directory.group) }}"
        mode: "{{ svc_traefik_directories.cfg.mode | default(svc_subdirectories.cfg.mode) | default(svc_directory.mode) }}"
        backup: true
      register: copy_traefik_http_config_result

- name: Manage traefik certificates directory
  block:
    - name: Ensure traefik letsencrypt directory is present
      ansible.builtin.file:
        path: "{{ svc_traefik_directories.cfg.path }}/letsencrypt"
        state: directory
        owner: "{{ svc_traefik_directories.cfg.owner | default(svc_subdirectories.cfg.owner) | default(svc_directory.owner) }}"
        group: "{{ svc_traefik_directories.cfg.group | default(svc_subdirectories.cfg.group) | default(svc_directory.group) }}"
        mode: 0600

    - name: Check for presence of traefik ACME file
      ansible.builtin.stat:
        path: "{{ svc_traefik_directories.cfg.path }}/letsencrypt/acme.json"
      register: __acme_file_result

    - name: Ensure traefik ACME file permissions
      ansible.builtin.file:
        path: "{{ svc_traefik_directories.cfg.path }}/letsencrypt/acme.json"
        state: "{{ 'file' if __acme_file_result.stat.exists else 'touch' }}"
        owner: "{{ svc_traefik_directories.cfg.owner | default(svc_subdirectories.cfg.owner) | default(svc_directory.owner) }}"
        group: "{{ svc_traefik_directories.cfg.group | default(svc_subdirectories.cfg.group) | default(svc_directory.group) }}"
        mode: 0600

- name: Deploy traefik service
  community.docker.docker_container:
    image: "{{ svc_traefik_container_image }}"
    pull: "{{ svc_force_pull or svc_traefik_version == 'latest' }}"
    name: "{{ svc_traefik_container_hostname }}"
    hostname: "{{ svc_traefik_container_hostname }}"
    restart_policy: "{{ svc_traefik_restart_policy | default(svc_restart_policy) }}"
    volumes:
      - "{{ svc_traefik_directories.cfg.path }}/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "{{ svc_traefik_directories.cfg.path }}/config:/etc/traefik/config:ro"
      - "{{ svc_traefik_directories.cfg.path }}/letsencrypt/acme.json:/etc/traefik/letsencrypt/acme.json:rw"
      - "{{ svc_traefik_directories.log.path }}:/var/log/traefik:rw"
    ports:
      - "{{ svc_traefik_container_ports.http | default('80') }}:80"
      - "{{ svc_traefik_container_ports.https | default('443') }}:443"
    env: "{{ svc_traefik_env_vars | combine(svc_traefik_acme_settings) }}"
    memory: "{{ svc_traefik_container_memory | default('1g') }}"
    log_driver: "{{ svc_log_driver }}"
    log_options: "{{ svc_log_options }}"
    recreate: "{{ true if (copy_traefik_config_result.changed or copy_traefik_http_config_result.changed) else false }}"
    labels:
      traefik.enable: 'true'
      traefik.http.routers.traefik-dash-rtr.rule: "Host(\"{{ svc_traefik_container_hostname }}.{{ svc_domain }}\")"
      traefik.http.routers.traefik-dash-rtr.entrypoints: webSecure
      traefik.http.routers.traefik-dash-rtr.service: api@internal
    networks:
      - name: "{{ svc_docker_network_name }}"
      - name: "{{ svc_socketproxy_network_name }}"
      - name: bridge

- name: Deploy traefik whoami service (debug)
  community.docker.docker_container:
    image: traefik/whoami
    pull: "{{ svc_force_pull or svc_traefik_version == 'latest' }}"
    name: whoami
    hostname: whoami
    restart_policy: "{{ svc_traefik_restart_policy | default(svc_restart_policy) }}"
    labels:
      traefik.enable: 'true'
      traefik.http.routers.whoami-rtr.rule: "Host(\"whoami.{{ svc_domain }}\")"
      traefik.http.routers.whoami-rtr.entrypoints: webSecure
    log_driver: "{{ svc_log_driver }}"
    log_options: "{{ svc_log_options }}"
    security_opts:
      - no-new-privileges:true
    state: "{{ 'started' if svc_traefik_debug else 'absent' }}"
    recreate: "{{ 'true' if svc_traefik_debug else 'false' }}"
    networks:
      - name: "{{ svc_docker_network_name }}"
...
